/*!The TT Library
 *
 * @Copyright (C) 2019-2021, TTLIB
 *
 * @file       state.h
 * @ingroup    prefix
 * @author     tango
 * @date       2021-01-08 
 * @brief      state.h file
 */

#ifndef TT_PREFIX_STATE_H
#define TT_PREFIX_STATE_H

/* //////////////////////////////////////////////////////////////////////////////////////
 * includes
 */
#include "config.h"
#include "type.h"
#include "keyword.h"

/* //////////////////////////////////////////////////////////////////////////////////////
 * extern
 */
__tt_extern_c_enter__

/* //////////////////////////////////////////////////////////////////////////////////////
 * macros
 */

// the state define
#define TT_STATE_DEFINE(type, state)         (((type) << 16) | (state))

/* //////////////////////////////////////////////////////////////////////////////////////
 * types
 */

// the state type enum
typedef enum __tt_state_type_e
{
    TT_STATE_TYPE_NONE      = 0
,   TT_STATE_TYPE_SOCK      = 1
,   TT_STATE_TYPE_HTTP      = 2
,   TT_STATE_TYPE_DATABASE  = 3
,   TT_STATE_TYPE_SYSERROR  = 4

}tt_state_type_e;

// the state enum
typedef enum __tt_state_e
{
    TT_STATE_OK                         = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 0)
,   TT_STATE_END                        = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 1)
,   TT_STATE_DEAD                       = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 2)
,   TT_STATE_READY                      = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 3)
,   TT_STATE_FAILED                     = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 4)
,   TT_STATE_KILLED                     = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 5)
,   TT_STATE_PAUSED                     = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 6)
,   TT_STATE_CLOSED                     = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 7)
,   TT_STATE_OPENED                     = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 8)
,   TT_STATE_OPENING                    = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 9)
,   TT_STATE_SUSPEND                    = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 10)
,   TT_STATE_RUNNING                    = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 11)
,   TT_STATE_PENDING                    = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 12)
,   TT_STATE_WAITING                    = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 13)
,   TT_STATE_WORKING                    = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 14)
,   TT_STATE_KILLING                    = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 15)
,   TT_STATE_PAUSING                    = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 16)
,   TT_STATE_EXITING                    = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 17)
,   TT_STATE_TIMEOUT                    = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 18)
,   TT_STATE_FINISHED                   = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 19)
,   TT_STATE_WAIT_FAILED                = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 20)
,   TT_STATE_POST_FAILED                = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 21)
,   TT_STATE_NOT_SUPPORTED              = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 22)
,   TT_STATE_UNKNOWN_ERROR              = TT_STATE_DEFINE(TT_STATE_TYPE_NONE, 23)

,   TT_STATE_SOCK_DNS_FAILED            = TT_STATE_DEFINE(TT_STATE_TYPE_SOCK, 1)
,   TT_STATE_SOCK_CONNECT_FAILED        = TT_STATE_DEFINE(TT_STATE_TYPE_SOCK, 2)
,   TT_STATE_SOCK_CONNECT_TIMEOUT       = TT_STATE_DEFINE(TT_STATE_TYPE_SOCK, 3)
,   TT_STATE_SOCK_RECV_TIMEOUT          = TT_STATE_DEFINE(TT_STATE_TYPE_SOCK, 4)
,   TT_STATE_SOCK_SEND_TIMEOUT          = TT_STATE_DEFINE(TT_STATE_TYPE_SOCK, 5)
,   TT_STATE_SOCK_RECV_FAILED           = TT_STATE_DEFINE(TT_STATE_TYPE_SOCK, 6)
,   TT_STATE_SOCK_SEND_FAILED           = TT_STATE_DEFINE(TT_STATE_TYPE_SOCK, 7)
,   TT_STATE_SOCK_OPEN_FAILED           = TT_STATE_DEFINE(TT_STATE_TYPE_SOCK, 8)
,   TT_STATE_SOCK_UNKNOWN_ERROR         = TT_STATE_DEFINE(TT_STATE_TYPE_SOCK, 9)
,   TT_STATE_SOCK_SSL_FAILED            = TT_STATE_DEFINE(TT_STATE_TYPE_SOCK, 10)
,   TT_STATE_SOCK_SSL_TIMEOUT           = TT_STATE_DEFINE(TT_STATE_TYPE_SOCK, 11)
,   TT_STATE_SOCK_SSL_WANT_READ         = TT_STATE_DEFINE(TT_STATE_TYPE_SOCK, 12)
,   TT_STATE_SOCK_SSL_WANT_WRIT         = TT_STATE_DEFINE(TT_STATE_TYPE_SOCK, 13)
,   TT_STATE_SOCK_SSL_WAIT_FAILED       = TT_STATE_DEFINE(TT_STATE_TYPE_SOCK, 14)
,   TT_STATE_SOCK_SSL_READ_FAILED       = TT_STATE_DEFINE(TT_STATE_TYPE_SOCK, 15)
,   TT_STATE_SOCK_SSL_WRIT_FAILED       = TT_STATE_DEFINE(TT_STATE_TYPE_SOCK, 16)
,   TT_STATE_SOCK_SSL_NOT_SUPPORTED     = TT_STATE_DEFINE(TT_STATE_TYPE_SOCK, 17)
,   TT_STATE_SOCK_SSL_UNKNOWN_ERROR     = TT_STATE_DEFINE(TT_STATE_TYPE_SOCK, 18)

,   TT_STATE_HTTP_RESPONSE_100          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 1)
,   TT_STATE_HTTP_RESPONSE_101          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 2)
,   TT_STATE_HTTP_RESPONSE_102          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 3)
,   TT_STATE_HTTP_RESPONSE_200          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 4)
,   TT_STATE_HTTP_RESPONSE_204          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 5)
,   TT_STATE_HTTP_RESPONSE_300          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 6)
,   TT_STATE_HTTP_RESPONSE_301          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 7)
,   TT_STATE_HTTP_RESPONSE_302          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 8)
,   TT_STATE_HTTP_RESPONSE_303          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 9)
,   TT_STATE_HTTP_RESPONSE_304          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 10)
,   TT_STATE_HTTP_RESPONSE_305          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 11)
,   TT_STATE_HTTP_RESPONSE_306          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 12)
,   TT_STATE_HTTP_RESPONSE_307          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 13)
,   TT_STATE_HTTP_RESPONSE_400          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 14)
,   TT_STATE_HTTP_RESPONSE_401          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 15)
,   TT_STATE_HTTP_RESPONSE_402          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 16)
,   TT_STATE_HTTP_RESPONSE_403          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 17)
,   TT_STATE_HTTP_RESPONSE_404          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 18)
,   TT_STATE_HTTP_RESPONSE_405          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 19)
,   TT_STATE_HTTP_RESPONSE_406          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 20)
,   TT_STATE_HTTP_RESPONSE_407          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 21)
,   TT_STATE_HTTP_RESPONSE_408          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 22)
,   TT_STATE_HTTP_RESPONSE_409          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 23)
,   TT_STATE_HTTP_RESPONSE_410          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 24)
,   TT_STATE_HTTP_RESPONSE_411          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 25)
,   TT_STATE_HTTP_RESPONSE_412          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 26)
,   TT_STATE_HTTP_RESPONSE_413          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 27)
,   TT_STATE_HTTP_RESPONSE_414          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 28)
,   TT_STATE_HTTP_RESPONSE_415          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 29)
,   TT_STATE_HTTP_RESPONSE_416          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 30)
,   TT_STATE_HTTP_RESPONSE_500          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 31)
,   TT_STATE_HTTP_RESPONSE_501          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 32)
,   TT_STATE_HTTP_RESPONSE_502          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 33)
,   TT_STATE_HTTP_RESPONSE_503          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 34)
,   TT_STATE_HTTP_RESPONSE_504          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 35)
,   TT_STATE_HTTP_RESPONSE_505          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 36)
,   TT_STATE_HTTP_RESPONSE_506          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 37)
,   TT_STATE_HTTP_RESPONSE_507          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 38)
,   TT_STATE_HTTP_RESPONSE_UNK          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 39)
,   TT_STATE_HTTP_RESPONSE_NUL          = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 40)
,   TT_STATE_HTTP_REQUEST_FAILED        = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 41)
,   TT_STATE_HTTP_REDIRECT_FAILED       = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 42)
,   TT_STATE_HTTP_POST_FAILED           = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 43)
,   TT_STATE_HTTP_RANGE_INVALID         = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 44)
,   TT_STATE_HTTP_GZIP_NOT_SUPPORTED    = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 45)
,   TT_STATE_HTTP_UNKNOWN_ERROR         = TT_STATE_DEFINE(TT_STATE_TYPE_HTTP, 46)

,   TT_STATE_DATABASE_NO_SUCH_TABLE     = TT_STATE_DEFINE(TT_STATE_TYPE_DATABASE, 1)
,   TT_STATE_DATABASE_NO_SUCH_FIELD     = TT_STATE_DEFINE(TT_STATE_TYPE_DATABASE, 2)
,   TT_STATE_DATABASE_NO_SUCH_DATABASE  = TT_STATE_DEFINE(TT_STATE_TYPE_DATABASE, 3)
,   TT_STATE_DATABASE_ACCESS_DENIED     = TT_STATE_DEFINE(TT_STATE_TYPE_DATABASE, 4)
,   TT_STATE_DATABASE_PARSE_ERROR       = TT_STATE_DEFINE(TT_STATE_TYPE_DATABASE, 5)
,   TT_STATE_DATABASE_VALUE_COUNT_ERROR = TT_STATE_DEFINE(TT_STATE_TYPE_DATABASE, 6)
,   TT_STATE_DATABASE_UNKNOWN_HOST      = TT_STATE_DEFINE(TT_STATE_TYPE_DATABASE, 7)
,   TT_STATE_DATABASE_UNKNOWN_ERROR     = TT_STATE_DEFINE(TT_STATE_TYPE_DATABASE, 8)

,   TT_STATE_SYSERROR_NOT_PERM          = TT_STATE_DEFINE(TT_STATE_TYPE_SYSERROR, 1)
,   TT_STATE_SYSERROR_NOT_FILEDIR       = TT_STATE_DEFINE(TT_STATE_TYPE_SYSERROR, 2)
,   TT_STATE_SYSERROR_UNKNOWN_ERROR     = TT_STATE_DEFINE(TT_STATE_TYPE_SYSERROR, 3)

}tt_state_e;

/* //////////////////////////////////////////////////////////////////////////////////////
 * interfaces
 */

/*! the state string
 *
 * @param state         the state
 *
 * @return              the state string
 */
tt_char_t const*        tt_state_cstr(tt_size_t state);

/* //////////////////////////////////////////////////////////////////////////////////////
 * extern
 */
__tt_extern_c_leave__

#endif